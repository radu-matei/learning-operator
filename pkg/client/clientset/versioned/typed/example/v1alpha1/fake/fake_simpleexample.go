/*
This code is auto-generated by k8s.io/code-generator
*/package fake

import (
	v1alpha1 "github.com/radu-matei/learning-operator/pkg/apis/example/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSimpleExamples implements SimpleExampleInterface
type FakeSimpleExamples struct {
	Fake *FakeExampleV1alpha1
	ns   string
}

var simpleexamplesResource = schema.GroupVersionResource{Group: "example.radu-matei.com", Version: "v1alpha1", Resource: "simpleexamples"}

var simpleexamplesKind = schema.GroupVersionKind{Group: "example.radu-matei.com", Version: "v1alpha1", Kind: "SimpleExample"}

// Get takes name of the simpleExample, and returns the corresponding simpleExample object, and an error if there is any.
func (c *FakeSimpleExamples) Get(name string, options v1.GetOptions) (result *v1alpha1.SimpleExample, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(simpleexamplesResource, c.ns, name), &v1alpha1.SimpleExample{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SimpleExample), err
}

// List takes label and field selectors, and returns the list of SimpleExamples that match those selectors.
func (c *FakeSimpleExamples) List(opts v1.ListOptions) (result *v1alpha1.SimpleExampleList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(simpleexamplesResource, simpleexamplesKind, c.ns, opts), &v1alpha1.SimpleExampleList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SimpleExampleList{}
	for _, item := range obj.(*v1alpha1.SimpleExampleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested simpleExamples.
func (c *FakeSimpleExamples) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(simpleexamplesResource, c.ns, opts))

}

// Create takes the representation of a simpleExample and creates it.  Returns the server's representation of the simpleExample, and an error, if there is any.
func (c *FakeSimpleExamples) Create(simpleExample *v1alpha1.SimpleExample) (result *v1alpha1.SimpleExample, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(simpleexamplesResource, c.ns, simpleExample), &v1alpha1.SimpleExample{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SimpleExample), err
}

// Update takes the representation of a simpleExample and updates it. Returns the server's representation of the simpleExample, and an error, if there is any.
func (c *FakeSimpleExamples) Update(simpleExample *v1alpha1.SimpleExample) (result *v1alpha1.SimpleExample, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(simpleexamplesResource, c.ns, simpleExample), &v1alpha1.SimpleExample{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SimpleExample), err
}

// Delete takes name of the simpleExample and deletes it. Returns an error if one occurs.
func (c *FakeSimpleExamples) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(simpleexamplesResource, c.ns, name), &v1alpha1.SimpleExample{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSimpleExamples) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(simpleexamplesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.SimpleExampleList{})
	return err
}

// Patch applies the patch and returns the patched simpleExample.
func (c *FakeSimpleExamples) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SimpleExample, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(simpleexamplesResource, c.ns, name, data, subresources...), &v1alpha1.SimpleExample{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SimpleExample), err
}
